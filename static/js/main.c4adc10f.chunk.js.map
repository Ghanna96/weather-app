{"version":3,"sources":["Components/searchbar/Searchbar.jsx","Components/form.jsx","Components/weatherIcon.jsx","Components/weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Searchbar","props","onChange","onSubmit","className","type","placeholder","Form","WeatherIcon","url","icon","src","alt","Weather","data","location","weather","temp","min","max","feels","humidity","pressure","wind","App","state","json","actualData","getData","obj","name","description","Math","round","main","temp_max","temp_min","feels_like","speed","setState","console","log","getApi","city","a","place","fetch","mode","locationInput","e","target","value","handleSubmit","preventDefault","this","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c4adc10f.chunk.js","sourcesContent":["import React from 'react';\nimport './searchbar.scss';\n\n// Reusable component for a searchbar,\n// create the prop \"onSubmit\" to pass the function you want to activate when submit,\n// creathe the prop \"onChange\" to pass the function to manage the input.\nfunction Searchbar(props) {\n\tconst { onChange, onSubmit } = props;\n\treturn (\n\t\t<form className='flexbox' onSubmit={onSubmit}>\n\t\t\t<input\n\t\t\t\tclassName='textbox'\n\t\t\t\ttype='search'\n\t\t\t\tplaceholder='Location'\n\t\t\t\tonChange={onChange}></input>\n\t\t</form>\n\t);\n}\nexport default Searchbar;\n","import React from 'react';\nimport Searchbar from './searchbar/Searchbar';\n\nfunction Form(props) {\n\treturn <Searchbar onSubmit={props.onSubmit} onChange={props.onChange} />;\n}\n\nexport default Form;\n","import React from 'react';\n\nfunction WeatherIcon(props) {\n\tlet url = `https://openweathermap.org/img/wn/${props.icon}@2x.png`;\n\n\treturn (\n\t\t<span>\n\t\t\t<img src={url} alt=''></img>\n\t\t</span>\n\t);\n}\n\nexport default WeatherIcon;\n","import React from 'react';\nimport WeatherIcon from './weatherIcon';\n\nfunction Weather(props) {\n\tconst {\n\t\tlocation,\n\t\tweather,\n\t\ttemp,\n\t\tmin,\n\t\tmax,\n\t\tfeels,\n\t\ticon,\n\t\thumidity,\n\t\tpressure,\n\t\twind,\n\t} = props.data;\n\treturn (\n\t\t<div className='card'>\n\t\t\t<div className='location'>\n\t\t\t\t<span>{location} </span>\n\t\t\t</div>\n\n\t\t\t<div className='weather'>\n\t\t\t\t<span>\n\t\t\t\t\t<WeatherIcon icon={icon} />\n\t\t\t\t</span>\n\t\t\t\t<span> {weather}</span>\n\t\t\t</div>\n\t\t\t<div className='temp'>\n\t\t\t\t<div> {temp} 째C</div>\n\t\t\t\t<span>Feels like {feels} 째C</span>\n\t\t\t</div>\n\t\t\t<div className='minmax'>\n\t\t\t\t<span>Max: {max} 째C</span>\n\t\t\t\t<span>Min: {min} 째C</span>\n\t\t\t</div>\n\t\t\t<div className='details'>\n\t\t\t\t<span>Humidity: {humidity} % </span>\n\t\t\t\t<span>Pressure: {pressure} hpa</span>\n\t\t\t\t<span>Wind: {wind} m/s</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\nexport default Weather;\n","import React, { Component } from 'react';\nimport Form from './Components/form';\nimport Weather from './Components/weather';\n\nclass App extends Component {\n\tstate = {\n\t\tlocation: '',\n\t\tjson: [],\n\t\tactualData: [],\n\t};\n\n\t//extract the info we're interested *incomplete\n\tgetData = () => {\n\t\tconst obj = {\n\t\t\tlocation: '',\n\t\t\tweather: '',\n\t\t\ttemp: '',\n\t\t\tmax: '',\n\t\t\tmin: '',\n\t\t\tfeels: '',\n\t\t\ticon: '',\n\t\t\thumidity: '',\n\t\t\tpressure: '',\n\t\t\twind: '',\n\t\t};\n\t\tconst data = this.state.json;\n\t\tobj.location = data.name;\n\t\tobj.weather = data.weather[0].description;\n\t\tobj.icon = data.weather[0].icon;\n\t\tobj.temp = Math.round(data.main.temp);\n\t\tobj.max = Math.round(data.main.temp_max);\n\t\tobj.min = Math.round(data.main.temp_min);\n\t\tobj.feels = Math.round(data.main.feels_like);\n\t\tobj.humidity = data.main.humidity;\n\t\tobj.pressure = data.main.pressure;\n\t\tobj.wind = data.wind.speed;\n\t\tthis.setState({ actualData: obj });\n\t\tconsole.log('obj ', obj);\n\t};\n\tgetApi = async (city) => {\n\t\tlet url, place;\n\n\t\tif (city) {\n\t\t\tplace = city;\n\t\t} else {\n\t\t\tplace = this.state.location;\n\t\t}\n\t\ttry {\n\t\t\turl = `https://api.openweathermap.org/data/2.5/weather?q=${place}&units=metric&appid=73bb57b7d1fab98dc011bd2055bf4c84`;\n\t\t\tconst data = await fetch(url, { mode: 'cors' });\n\t\t\tconst weather = await data.json();\n\t\t\tthis.setState({ json: weather });\n\t\t\tthis.getData();\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\tcomponentDidMount() {\n\t\t//fetch api and save obj in state\n\t\tthis.getApi('Milano');\n\t}\n\tlocationInput = (e) => {\n\t\tlet city = this.state.location;\n\t\tcity = e.target.value;\n\t\tthis.setState({ location: city });\n\t};\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tthis.getApi();\n\t\tconsole.log(this.state.actualData);\n\t\t// this.getWeatherData();\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div className='container'>\n\t\t\t\t<header>\n\t\t\t\t\t<h3 className=''>Weather App</h3>\n\t\t\t\t</header>\n\n\t\t\t\t<Form onChange={this.locationInput} onSubmit={this.handleSubmit} />\n\n\t\t\t\t<Weather\n\t\t\t\t\tdata={this.state.actualData}\n\t\t\t\t\ticon={this.state.actualData.icon}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './style.scss';\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}